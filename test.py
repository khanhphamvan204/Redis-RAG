#!/usr/bin/env python3
"""
Script ƒë·ªÉ ki·ªÉm tra Redis v√† RediSearch module
Ch·∫°y: python redis_diagnostic.py
"""

import redis
import sys

def check_redis_connection():
    """Ki·ªÉm tra k·∫øt n·ªëi Redis"""
    print("=" * 60)
    print("KI·ªÇM TRA K·∫æT N·ªêI REDIS")
    print("=" * 60)
    
    try:
        client = redis.Redis(
            host='localhost',
            port=6379,
            db=0,
            decode_responses=False
        )
        
        # Test ping
        response = client.ping()
        print(f"‚úÖ Redis connection: OK (ping response: {response})")
        
        # Get Redis info
        info = client.info()
        print(f"‚úÖ Redis version: {info.get('redis_version', 'unknown')}")
        print(f"‚úÖ Redis mode: {info.get('redis_mode', 'unknown')}")
        
        return client
    except redis.ConnectionError as e:
        print(f"‚ùå Redis connection failed: {e}")
        print("\nüí° Gi·∫£i ph√°p:")
        print("   1. Ki·ªÉm tra Redis ƒëang ch·∫°y: sudo systemctl status redis")
        print("   2. Kh·ªüi ƒë·ªông Redis: sudo systemctl start redis")
        print("   3. Ho·∫∑c: redis-server")
        return None
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return None

def check_redis_modules(client):
    """Ki·ªÉm tra RediSearch module"""
    print("\n" + "=" * 60)
    print("KI·ªÇM TRA REDISEARCH MODULE")
    print("=" * 60)
    
    try:
        modules = client.execute_command('MODULE LIST')
        
        if not modules:
            print("‚ùå Kh√¥ng c√≥ module n√†o ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            print_installation_guide()
            return False
        
        print(f"üì¶ C√°c module ƒë√£ c√†i ƒë·∫∑t: {len(modules)}")
        
        has_search = False
        for module in modules:
            # module is already a list of key-value pairs
            # Convert to dict for easier access
            module_dict = {}
            
            # Handle both dict and list formats
            if isinstance(module, dict):
                # Already a dict
                for key, value in module.items():
                    key_str = key.decode() if isinstance(key, bytes) else str(key)
                    
                    if isinstance(value, bytes):
                        value = value.decode()
                    elif isinstance(value, list):
                        value = [v.decode() if isinstance(v, bytes) else v for v in value]
                    
                    module_dict[key_str] = value
            elif isinstance(module, list):
                # List of alternating keys and values
                for i in range(0, len(module), 2):
                    if i + 1 < len(module):
                        key = module[i]
                        value = module[i + 1]
                        
                        key_str = key.decode() if isinstance(key, bytes) else str(key)
                        
                        if isinstance(value, bytes):
                            value = value.decode()
                        elif isinstance(value, list):
                            value = [v.decode() if isinstance(v, bytes) else v for v in value]
                        
                        module_dict[key_str] = value
            
            module_name = module_dict.get('name', 'unknown')
            module_ver = module_dict.get('ver', 'unknown')
            
            print(f"   - {module_name} (version: {module_ver})")
            
            # Check if this is RediSearch module
            if isinstance(module_name, str) and 'search' in module_name.lower():
                has_search = True
        
        if has_search:
            print("\n‚úÖ RediSearch module: INSTALLED")
            return True
        else:
            print("\n‚ùå RediSearch module: NOT FOUND")
            print_installation_guide()
            return False
            
    except redis.exceptions.ResponseError as e:
        print(f"‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra modules: {e}")
        print("üí° Redis server c√≥ th·ªÉ kh√¥ng h·ªó tr·ª£ MODULE LIST command")
        print_installation_guide()
        return False
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()
        return False

def print_installation_guide():
    """In h∆∞·ªõng d·∫´n c√†i ƒë·∫∑t"""
    print("\n" + "=" * 60)
    print("H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T REDIS STACK")
    print("=" * 60)
    
    print("\nüêß Ubuntu/Debian:")
    print("   curl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg")
    print("   echo 'deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main' | sudo tee /etc/apt/sources.list.d/redis.list")
    print("   sudo apt-get update")
    print("   sudo apt-get install redis-stack-server")
    print("   sudo systemctl start redis-stack-server")
    
    print("\nüçé MacOS:")
    print("   brew tap redis-stack/redis-stack")
    print("   brew install redis-stack")
    print("   redis-stack-server")
    
    print("\nüê≥ Docker:")
    print("   docker run -d --name redis-stack -p 6379:6379 redis/redis-stack:latest")
    
    print("\nüìö Ho·∫∑c:")
    print("   Website: https://redis.io/docs/stack/")
    print("   Download: https://redis.io/download")

def check_existing_indices(client):
    """Ki·ªÉm tra c√°c index ƒë√£ t·ªìn t·∫°i"""
    print("\n" + "=" * 60)
    print("KI·ªÇM TRA C√ÅC INDEX ƒê√É T·∫†O")
    print("=" * 60)
    
    try:
        # Try to list all indices
        keys = client.keys("doc:*")
        
        if keys:
            print(f"üìä T√¨m th·∫•y {len(keys)} keys v·ªõi pattern 'doc:*'")
            
            # Group by file_type
            file_types = set()
            for key in keys[:10]:  # Show first 10
                key_str = key.decode() if isinstance(key, bytes) else key
                parts = key_str.split(':')
                if len(parts) >= 2:
                    file_types.add(parts[1])
                print(f"   - {key_str}")
            
            if len(keys) > 10:
                print(f"   ... v√† {len(keys) - 10} keys kh√°c")
            
            if file_types:
                print(f"\nüìÅ File types ƒë∆∞·ª£c t√¨m th·∫•y: {', '.join(file_types)}")
        else:
            print("‚ö†Ô∏è  Ch∆∞a c√≥ d·ªØ li·ªáu vector n√†o trong Redis")
            print("üí° H√£y th√™m t√†i li·ªáu qua API /add endpoint tr∆∞·ªõc")
        
        # Try to get index info
        try:
            result = client.execute_command('FT._LIST')
            if result:
                print(f"\nüìë RediSearch indices: {len(result)}")
                for idx in result:
                    idx_name = idx.decode() if isinstance(idx, bytes) else idx
                    print(f"   - {idx_name}")
                    
                    try:
                        info = client.execute_command('FT.INFO', idx_name)
                        # Parse FT.INFO output (it's a list of key-value pairs)
                        for i in range(0, len(info), 2):
                            if i + 1 < len(info):
                                key = info[i].decode() if isinstance(info[i], bytes) else info[i]
                                if key == 'num_docs':
                                    num_docs = info[i + 1]
                                    print(f"     ‚Üí S·ªë documents: {num_docs}")
                                    break
                    except Exception as e:
                        print(f"     ‚Üí Kh√¥ng th·ªÉ l·∫•y info: {e}")
            else:
                print("\n‚ö†Ô∏è  Ch∆∞a c√≥ index n√†o ƒë∆∞·ª£c t·∫°o")
        except redis.exceptions.ResponseError:
            print("\n‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y danh s√°ch indices (RediSearch ch∆∞a ƒë∆∞·ª£c c√†i)")
            
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        import traceback
        traceback.print_exc()

def main():
    print("\nüîç B·∫ÆT ƒê·∫¶U KI·ªÇM TRA H·ªÜ TH·ªêNG REDIS\n")
    
    # Step 1: Check connection
    client = check_redis_connection()
    if not client:
        sys.exit(1)
    
    # Step 2: Check modules
    has_search = check_redis_modules(client)
    
    # Step 3: Check existing data
    check_existing_indices(client)
    
    # Summary
    print("\n" + "=" * 60)
    print("T√ìM T·∫ÆT")
    print("=" * 60)
    
    if has_search:
        print("‚úÖ H·ªá th·ªëng s·∫µn s√†ng s·ª≠ d·ª•ng RedisVL")
        print("üí° B·∫°n c√≥ th·ªÉ th√™m t√†i li·ªáu qua API /add endpoint")
    else:
        print("‚ùå H·ªá th·ªëng CH∆ØA s·∫µn s√†ng")
        print("üí° Vui l√≤ng c√†i ƒë·∫∑t Redis Stack theo h∆∞·ªõng d·∫´n ·ªü tr√™n")
        print("\nüîÑ HO·∫∂C: Quay l·∫°i s·ª≠ d·ª•ng FAISS (kh√¥ng c·∫ßn Redis)")
    
    print("\n")

if __name__ == "__main__":
    main()